{"version":3,"sources":["components/CategoryAdd.js","helpers/getGif.js","components/GifGridItem.js","components/GridGif.js","hooks/useFetchGifs.js","GifApp.js","reportWebVitals.js","index.js"],"names":["CategoryAdd","setCategories","useState","category","setCategory","onSubmit","e","preventDefault","trim","length","cat","className","type","placeholder","id","required","value","onChange","target","htmlFor","fetchGifts","a","url","encodeURI","fetch","resp","json","data","gifs","map","title","images","downsized_medium","GifGridItem","src","alt","GridGif","loading","state","setState","useEffect","then","imgs","useFetchGifs","img","GifApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"gPAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACZC,mBAAS,IADG,mBACrCC,EADqC,KAC3BC,EAD2B,KAY5C,OACI,sBAAMC,SARS,SAACC,GAChBA,EAAEC,iBACCJ,EAASK,OAAOC,OAAQ,IACvBR,GAAc,SAAAS,GAAG,OAAKP,GAAL,mBAAkBO,OACnCN,EAAY,MAIhB,SACI,sBAAKO,UAAU,oBAAf,UACI,uBACIA,UAAU,cACVC,KAAK,OACLC,YAAY,MACZC,GAAG,OACHC,UAAQ,EACRC,MAAOb,EACPc,SApBO,SAACX,GACpBF,EAAYE,EAAEY,OAAOF,UAqBb,uBAAOL,UAAU,cAAcQ,QAAQ,OAAvC,uB,+BC5BHC,EAAU,uCAAG,WAAOjB,GAAP,uBAAAkB,EAAA,4DACV,mCACE,IACRC,EAHgB,iDAGgCC,UAAUpB,GAH1C,kBAER,IAFQ,oBACV,oCADU,SAIHqB,MAAMF,GAJH,cAIhBG,EAJgB,gBAKDA,EAAKC,OALJ,uBAKfC,EALe,EAKfA,KACDC,EAAOD,EAAKE,KAAI,YAAsB,IAApBf,EAAmB,EAAnBA,GAAGgB,EAAgB,EAAhBA,MAAMC,EAAU,EAAVA,OAC7B,MAAO,CACHjB,KACAgB,QACAR,IAAG,OAACS,QAAD,IAACA,OAAD,EAACA,EAAQC,iBAAiBV,QAVf,kBAafM,GAbe,4CAAH,sDCGVK,G,KAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOR,EAAS,EAATA,IAChC,OACI,sBAAKX,UAAU,sDAAf,UACI,qBAAKuB,IAAKZ,EAAKa,IAAKL,IACpB,mBAAGnB,UAAU,oBAAb,SAAkCmB,SCHjCM,EAAU,SAAC,GAAgB,IAAfjC,EAAc,EAAdA,SAAc,ECAb,SAACA,GAAY,IAAD,EACRD,mBAAS,CAC/ByB,KAAK,GACLU,SAAQ,IAHsB,mBAC3BC,EAD2B,KACpBC,EADoB,KAalC,OARAC,qBAAU,WACNpB,EAAWjB,GAAUsC,MAAK,SAAAC,GACtBH,EAAS,CACLZ,KAAKe,EACLL,SAAQ,SAGjB,CAAClC,IACGmC,EDZ0BK,CAAaxC,GAA9BuC,EADmB,EACxBf,KAAWU,EADa,EACbA,QACtB,OACI,qCACA,4BAAIlC,IAEAkC,GAAW,qBAAK1B,UAAU,aAAf,SACZ,qBAAKA,UAAU,SAAf,SACK,sBAAKA,UAAU,UAAf,UACA,qBAAKA,UAAU,aACf,qBAAKA,UAAU,oBAMvB,qBAAKA,UAAU,aAAf,SACK+B,EAAKb,KAAI,SAAAe,GAAG,OAAG,cAAC,EAAD,eAA8BA,GAAZA,EAAI9B,aEjBrC+B,G,MAAS,WAAO,IAAD,EACY3C,mBAAS,CAAC,qBADtB,mBACjB4C,EADiB,KACL7C,EADK,KAExB,OACI,0BAASU,UAAU,YAAnB,UACI,8DACA,cAAC,EAAD,CAAaV,cAAeA,IAE3B6C,EAAWjB,KAAI,SAAA1B,GAAQ,OAAG,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,WCCtC4C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BX,K","file":"static/js/main.8a44b753.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\nimport './CategoryAdd.css'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const CategoryAdd = ({setCategories}) => {\r\n    const [category, setCategory] = useState('');\r\n    const handleCategory = (e)=>{\r\n        setCategory(e.target.value);\r\n    }\r\n    const handleSubmit=(e)=>{\r\n        e.preventDefault();\r\n        if(category.trim().length >2){\r\n            setCategories(cat => [category, ...cat])\r\n            setCategory('');\r\n        }\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className=\"form__group field\">\r\n                <input\r\n                    className=\"form__field\"\r\n                    type=\"text\"\r\n                    placeholder=\"Gif\"\r\n                    id=\"name\"\r\n                    required\r\n                    value={category}\r\n                    onChange={handleCategory}\r\n                />\r\n                <label className=\"form__label\" htmlFor=\"name\">Gif</label>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nCategoryAdd.propTypes = {\r\n    setCategories:PropTypes.func.isRequired\r\n}\r\n","export const fetchGifts = async (category)=>{\r\n    const key = 'ei7TkabY87g3kxvxLekZfqTLAeLlDErr';\r\n    const limit = \"6\";\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=${limit}&api_key=${key}`\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n    const gifs = data.map(({id,title,images})=>{\r\n        return {\r\n            id,\r\n            title,\r\n            url:images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs;\r\n}","import React from 'react'\r\nimport './GridGif.css'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n    return (\r\n        <div className=\"grid__gifs__self animate__animated animate__flipInX\">\r\n            <img src={url} alt={title}/>\r\n            <p className=\"grid__gifs__title\">{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem'\r\nimport './GridGif.css'\r\nexport const GridGif = ({category}) => {\r\n        const {data:imgs, loading} = useFetchGifs(category)\r\n    return (\r\n        <>\r\n        <p>{category}</p>\r\n        {\r\n            loading && <div className=\"load-wrapp\">\r\n           <div className=\"load-9\">\r\n                <div className=\"spinner\">\r\n                <div className=\"bubble-1\"></div>\r\n                <div className=\"bubble-2\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        }\r\n        \r\n        <div className=\"grid__gifs\">\r\n            {imgs.map(img=> <GifGridItem key={img.id} {...img}/>)}\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState,useEffect } from \"react\";\r\nimport { fetchGifts } from \"../helpers/getGif\";\r\n\r\n\r\nexport const useFetchGifs=(category)=>{\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading:true\r\n    });\r\n    useEffect(() => {\r\n        fetchGifts(category).then(imgs =>{\r\n            setState({\r\n                data:imgs,\r\n                loading:false,\r\n            })\r\n        })\r\n    }, [category])\r\n    return state;\r\n}","import React, { useState } from 'react'\r\nimport { CategoryAdd } from './components/CategoryAdd'\r\nimport { GridGif } from './components/GridGif'\r\nimport './gifApp.css'\r\nexport const GifApp = () => {\r\n    const [categories, setCategories] = useState(['kimetsu no yaiba'])\r\n    return (\r\n        <section className=\"container\">\r\n            <h2> Diviertet√© con los gifs </h2>\r\n            <CategoryAdd setCategories={setCategories}/>\r\n            \r\n           { categories.map(category=> <GridGif key={category} category={category} />)}\r\n        </section>\r\n    )\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifApp} from './GifApp';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <GifApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}